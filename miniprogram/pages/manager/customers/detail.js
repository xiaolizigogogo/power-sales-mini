// pages/manager/customers/detail.js
const app = getApp();
const apiService = require('../../../utils/api').apiService;
const { formatTime } = require('../../../utils/date');

const formatDateTime = (dateTimeStr) => {
  if (!dateTimeStr) return '';
  const date = new Date(dateTimeStr);
  if (isNaN(date.getTime())) return '';
  
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
};

Page({
  data: {
    customerId: '',
    customerInfo: {},
    followRecords: [],
    orders: [],
    activities: [],
    loading: true,
    loadingFollows: false,
    loadingOrders: false,
    showMoreMenu: false,
    showStatusModal: false,
    showFollowModal: false,
    newFollowContent: '',
    newFollowType: 'phone',
    newFollowPriority: 'medium',
    newFollowDate: '',
    newFollowTime: '',
    followTypes: [
      { value: 'phone', label: 'ÁîµËØùË∑üËøõ', icon: 'üìû' },
      { value: 'visit', label: 'ÂÆûÂú∞ÊãúËÆø', icon: 'üè¢' },
      { value: 'wechat', label: 'ÂæÆ‰ø°Ê≤üÈÄö', icon: 'üí¨' },
      { value: 'email', label: 'ÈÇÆ‰ª∂ËÅîÁ≥ª', icon: 'üìß' }
    ],
    priorities: [
      { value: 'high', label: 'È´ò‰ºòÂÖàÁ∫ß', color: '#ff4d4f' },
      { value: 'medium', label: '‰∏≠‰ºòÂÖàÁ∫ß', color: '#faad14' },
      { value: 'low', label: '‰Ωé‰ºòÂÖàÁ∫ß', color: '#52c41a' }
    ],
    statusOptions: [
      { value: 'potential', label: 'ÊΩúÂú®ÂÆ¢Êà∑', color: '#d9d9d9' },
      { value: 'contacted', label: 'Â∑≤ËÅîÁ≥ª', color: '#1890ff' },
      { value: 'interested', label: 'ÊúâÊÑèÂêë', color: '#faad14' },
      { value: 'signed', label: 'Â∑≤Á≠æÁ∫¶', color: '#52c41a' },
      { value: 'lost', label: 'Â∑≤ÊµÅÂ§±', color: '#ff4d4f' }
    ],
    tabIndex: 0, // 0: Ë∑üËøõËÆ∞ÂΩï, 1: ËÆ¢ÂçïËÆ∞ÂΩï, 2: Ê¥ªÂä®ËÆ∞ÂΩï
    refreshing: false
  },

  onLoad: function (options) {
    this.setData({
      customerId: options.id || ''
    });
    this.loadCustomerInfo();
    this.loadFollowRecords();
    this.loadOrders();
    this.loadActivities();
  },

  onShow: function () {
    // ‰ªéË∑üËøõÈ°µÈù¢ËøîÂõûÊó∂Âà∑Êñ∞Êï∞ÊçÆ
    if (this.data.customerId) {
      this.loadFollowRecords();
    }
  },

  onPullDownRefresh: function () {
    this.setData({ refreshing: true });
    Promise.all([
      this.loadCustomerInfo(),
      this.loadFollowRecords(),
      this.loadOrders(),
      this.loadActivities()
    ]).finally(() => {
      this.setData({ refreshing: false });
      wx.stopPullDownRefresh();
    });
  },

  // Âä†ËΩΩÂÆ¢Êà∑‰ø°ÊÅØ
  async loadCustomerInfo() {
    try {
      this.setData({ loading: true });
      
      // Ê®°ÊãüAPIË∞ÉÁî®
      const customerInfo = {
        id: this.data.customerId,
        name: 'Âº†‰∏â',
        company: 'Âåó‰∫¨ÁßëÊäÄÊúâÈôêÂÖ¨Âè∏',
        position: 'ÈááË¥≠ÁªèÁêÜ',
        phone: '13812345678',
        email: 'zhangsan@example.com',
        wechat: 'zhangsan_wechat',
        address: 'Âåó‰∫¨Â∏ÇÊúùÈò≥Âå∫Âª∫ÂõΩÈó®Â§ñÂ§ßË°ó1Âè∑',
        industry: 'Âà∂ÈÄ†‰∏ö',
        scale: '‰∏≠Âûã‰ºÅ‰∏ö',
        status: 'interested',
        source: 'ÁΩëÁªúÊé®Âπø',
        createTime: '2024-01-15 10:30:00',
        lastFollowTime: '2024-07-01 14:20:00',
        totalOrders: 5,
        totalAmount: 128600,
        tags: ['VIPÂÆ¢Êà∑', 'ÈáçÁÇπÂÖ≥Ê≥®', 'ÂÜ≥Á≠ñÂø´'],
        manager: 'ÊùéÁªèÁêÜ',
        remark: 'ËØ•ÂÆ¢Êà∑ÂØπÊàë‰ª¨ÁöÑ‰∫ßÂìÅÂæàÊÑüÂÖ¥Ë∂£ÔºåÂ∑≤ÁªèËøõË°å‰∫ÜÂ§öÊ¨°Ê≤üÈÄöÔºåÈ¢ÑËÆ°Êú¨ÊúàÂèØ‰ª•Á≠æÁ∫¶„ÄÇ'
      };
      
      this.setData({
        customerInfo,
        loading: false
      });
    } catch (error) {
      console.error('Âä†ËΩΩÂÆ¢Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error);
      this.setData({ loading: false });
      wx.showToast({
        title: 'Âä†ËΩΩÂÆ¢Êà∑‰ø°ÊÅØÂ§±Ë¥•',
        icon: 'none'
      });
    }
  },

  // Âä†ËΩΩË∑üËøõËÆ∞ÂΩï
  async loadFollowRecords() {
    try {
      this.setData({ loadingFollows: true });
      
      const employeeId = wx.getStorageSync('userInfo').data.id;
      const res = await apiService.get(`/customers/${this.data.customerId}/follows`, {
        page: 1,
        pageSize: 50
      });
      
      if (res.code === 200) {
        const records = res.data.records.map(record => ({
          ...record,
          createdAt: formatDateTime(record.createdAt),
          nextFollowDate: formatDateTime(record.nextFollowDate)
        }));
        
        this.setData({
          followRecords: records,
          loadingFollows: false
        });
      }
    } catch (error) {
      console.error('Âä†ËΩΩË∑üËøõËÆ∞ÂΩïÂ§±Ë¥•:', error);
      this.setData({ loadingFollows: false });
      wx.showToast({
        title: 'Âä†ËΩΩË∑üËøõËÆ∞ÂΩïÂ§±Ë¥•',
        icon: 'none'
      });
    }
  },

  // Âä†ËΩΩËÆ¢ÂçïËÆ∞ÂΩï
  async loadOrders() {
    try {
      this.setData({ loadingOrders: true });
      
      const res = await apiService.get(`/customers/${this.data.customerId}/orders`, {
        page: 1,
        pageSize: 50
      });
      
      if (res.code === 200) {
        const orders = res.data.records.map(order => {
          // ‰øùÁïôÂéüÂßãÁä∂ÊÄÅÔºå‰∏çÂÅöÊò†Â∞ÑËΩ¨Êç¢
          const status = order.status || 'pending';
          return {
            ...order,
            statusText: this.getOrderStatusText(status),
            statusDesc: this.getOrderStatusDesc(status),
            statusColor: this.getOrderStatusColor(status),
            createTime: formatDateTime(order.createTime),
            deliveryTime: formatDateTime(order.deliveryTime),
            // ËÆ°ÁÆóÂçï‰ª∑
            unitPrice: order.quantity > 0 ? (order.totalAmount / order.quantity).toFixed(2) : '0.00',
            // Ê†ºÂºèÂåñÈáëÈ¢ù
            totalAmount: order.totalAmount ? order.totalAmount.toFixed(2) : '0.00'
          };
        });
        
        this.setData({
          orders,
          loadingOrders: false
        });

        console.log('ËÆ¢ÂçïÊï∞ÊçÆ:', orders);
      }
    } catch (error) {
      console.error('Âä†ËΩΩËÆ¢ÂçïËÆ∞ÂΩïÂ§±Ë¥•:', error);
      this.setData({ loadingOrders: false });
      wx.showToast({
        title: 'Âä†ËΩΩËÆ¢ÂçïËÆ∞ÂΩïÂ§±Ë¥•',
        icon: 'none'
      });
    }
  },

  // Ëé∑ÂèñËÆ¢ÂçïÁä∂ÊÄÅÊñáÊú¨
  getOrderStatusText(status) {
    const statusMap = {
      'pending': 'ÂæÖÂ§ÑÁêÜ',
      'negotiating': 'ÂïÜÂä°Ê¥ΩË∞à‰∏≠',
      'confirmed': 'Â∑≤Á°ÆËÆ§',
      'paid': 'Â∑≤ÊîØ‰ªò',
      'service': 'ÊúçÂä°‰∏≠',
      'completed': 'Â∑≤ÂÆåÊàê',
      'cancelled': 'Â∑≤ÂèñÊ∂à',
      'rejected': 'Â∑≤ÊãíÁªù',
      'contract': 'ÂæÖÁ≠æÁ∫¶',
      'active': 'ÊúçÂä°‰∏≠'
    };
    // Â¶ÇÊûúÁä∂ÊÄÅ‰∏çÂú®Êò†Â∞Ñ‰∏≠ÔºåÁõ¥Êé•ÊòæÁ§∫ÂéüÂßãÁä∂ÊÄÅ
    return statusMap[status] || status;
  },

  // Ëé∑ÂèñËÆ¢ÂçïÁä∂ÊÄÅËØ¥Êòé
  getOrderStatusDesc(status) {
    const statusDescMap = {
      'pending': 'ËÆ¢ÂçïÂæÖÂ§ÑÁêÜÔºåÁ≠âÂæÖÂÆ¢Êà∑ÁªèÁêÜÁ°ÆËÆ§',
      'negotiating': 'Ê≠£Âú®ËøõË°åÂïÜÂä°Ê¥ΩË∞àÔºåËØ∑Á≠âÂæÖ',
      'confirmed': 'ËÆ¢ÂçïÂ∑≤Á°ÆËÆ§ÔºåÁ≠âÂæÖÊîØ‰ªò',
      'paid': 'ËÆ¢ÂçïÂ∑≤ÊîØ‰ªòÔºåÁ≠âÂæÖÂºÄÈÄöÊúçÂä°',
      'service': 'ÊúçÂä°Â∑≤ÂºÄÈÄöÔºåÊ≠£Â∏∏‰ΩøÁî®‰∏≠',
      'completed': 'ÊúçÂä°Â∑≤ÂÆåÊàê',
      'cancelled': 'ËÆ¢ÂçïÂ∑≤ÂèñÊ∂à',
      'rejected': 'ËÆ¢ÂçïÂ∑≤Ë¢´ÊãíÁªù',
      'contract': 'Á≠âÂæÖÁ≠æÁΩ≤ÂêàÂêå',
      'active': 'ÊúçÂä°Ê≠£Â∏∏‰ΩøÁî®‰∏≠'
    };
    // Â¶ÇÊûúÁä∂ÊÄÅ‰∏çÂú®Êò†Â∞Ñ‰∏≠ÔºåËøîÂõûÁ©∫Â≠óÁ¨¶‰∏≤
    return statusDescMap[status] || '';
  },

  // Ëé∑ÂèñËÆ¢ÂçïÁä∂ÊÄÅÈ¢úËâ≤
  getOrderStatusColor(status) {
    const statusColorMap = {
      'pending': '#fa8c16',
      'negotiating': '#1890ff',
      'confirmed': '#52c41a',
      'paid': '#2b85e4',
      'service': '#1890ff',
      'completed': '#52c41a',
      'cancelled': '#ff4d4f',
      'rejected': '#ff4d4f',
      'contract': '#1890ff',
      'active': '#1890ff'
    };
    // Â¶ÇÊûúÁä∂ÊÄÅ‰∏çÂú®Êò†Â∞Ñ‰∏≠ÔºåËøîÂõûÈªòËÆ§È¢úËâ≤
    return statusColorMap[status] || '#999999';
  },

  // Âä†ËΩΩÊ¥ªÂä®ËÆ∞ÂΩï
  async loadActivities() {
    try {
      // Ê®°ÊãüAPIË∞ÉÁî®
      const activities = [
        {
          id: 1,
          type: 'follow',
          title: 'Ê∑ªÂä†‰∫ÜË∑üËøõËÆ∞ÂΩï',
          content: 'ÁîµËØùÊ≤üÈÄö‰∫ßÂìÅÈúÄÊ±Ç',
          createTime: '2024-07-01 14:20:00',
          user: 'ÊùéÁªèÁêÜ'
        },
        {
          id: 2,
          type: 'order',
          title: 'ÂàõÂª∫‰∫ÜÊñ∞ËÆ¢Âçï',
          content: 'ËÆ¢ÂçïÂè∑ÔºöORD202407001',
          createTime: '2024-06-15 10:00:00',
          user: 'ÊùéÁªèÁêÜ'
        },
        {
          id: 3,
          type: 'status',
          title: 'Êõ¥Êñ∞‰∫ÜÂÆ¢Êà∑Áä∂ÊÄÅ',
          content: '‰ªé"Â∑≤ËÅîÁ≥ª"Êõ¥Êñ∞‰∏∫"ÊúâÊÑèÂêë"',
          createTime: '2024-06-10 16:00:00',
          user: 'ÊùéÁªèÁêÜ'
        }
      ];
      
      this.setData({ activities });
    } catch (error) {
      console.error('Âä†ËΩΩÊ¥ªÂä®ËÆ∞ÂΩïÂ§±Ë¥•:', error);
    }
  },

  // TabÂàáÊç¢‰∫ã‰ª∂
  onTabChange(e) {
    const index = e.detail.index;
    this.setData({
      tabIndex: index || 0  // Á°Æ‰øùÊúâÈªòËÆ§ÂÄº
    });
  },

  // ÊòæÁ§∫Êõ¥Â§öËèúÂçï
  onShowMoreMenu() {
    this.setData({ showMoreMenu: true });
  },

  // ÈöêËóèÊõ¥Â§öËèúÂçï
  onHideMoreMenu() {
    this.setData({ showMoreMenu: false });
  },

  // Âø´ÈÄüËÅîÁ≥ª
  onQuickContact(e) {
    const { type } = e.currentTarget.dataset;
    const { customerInfo } = this.data;
    
    switch (type) {
      case 'phone':
        wx.makePhoneCall({
          phoneNumber: customerInfo.phone
        });
        break;
      case 'sms':
        // Â∞èÁ®ãÂ∫èÊó†Ê≥ïÁõ¥Êé•ÂèëÈÄÅÁü≠‰ø°ÔºåÂèØ‰ª•Â§çÂà∂Âè∑Á†Å
        wx.setClipboardData({
          data: customerInfo.phone,
          success: () => {
            wx.showToast({
              title: 'Âè∑Á†ÅÂ∑≤Â§çÂà∂',
              icon: 'success'
            });
          }
        });
        break;
      case 'wechat':
        wx.showToast({
          title: 'ËØ∑ÊâãÂä®Ê∑ªÂä†ÂæÆ‰ø°',
          icon: 'none'
        });
        break;
      case 'email':
        wx.setClipboardData({
          data: customerInfo.email,
          success: () => {
            wx.showToast({
              title: 'ÈÇÆÁÆ±Â∑≤Â§çÂà∂',
              icon: 'success'
            });
          }
        });
        break;
    }
    
    this.setData({ showMoreMenu: false });
  },

  // ÊòæÁ§∫Áä∂ÊÄÅ‰øÆÊîπÂºπÁ™ó
  onShowStatusModal() {
    this.setData({ 
      showStatusModal: true,
      showMoreMenu: false 
    });
  },

  // ÈöêËóèÁä∂ÊÄÅ‰øÆÊîπÂºπÁ™ó
  onHideStatusModal() {
    this.setData({ showStatusModal: false });
  },

  // Êõ¥Êñ∞ÂÆ¢Êà∑Áä∂ÊÄÅ
  async onUpdateStatus(e) {
    const { value } = e.currentTarget.dataset;
    
    try {
      // Ê®°ÊãüAPIË∞ÉÁî®
      await new Promise(resolve => setTimeout(resolve, 500));
      
      this.setData({
        'customerInfo.status': value,
        showStatusModal: false
      });
      
      wx.showToast({
        title: 'Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü',
        icon: 'success'
      });
      
      // Âà∑Êñ∞Ê¥ªÂä®ËÆ∞ÂΩï
      this.loadActivities();
    } catch (error) {
      console.error('Êõ¥Êñ∞Áä∂ÊÄÅÂ§±Ë¥•:', error);
      wx.showToast({
        title: 'Êõ¥Êñ∞Áä∂ÊÄÅÂ§±Ë¥•',
        icon: 'none'
      });
    }
  },

  // Ë∑≥ËΩ¨Âà∞Ê∑ªÂä†Ë∑üËøõÈ°µÈù¢
  onAddFollow() {
    wx.navigateTo({
      url: `/pages/manager/customers/follow-add?id=${this.data.customerId}&name=${this.data.customerInfo.name}`
    });
  },

  // ÁºñËæëÂÆ¢Êà∑‰ø°ÊÅØ
  onEditCustomer() {
    wx.navigateTo({
      url: `/pages/manager/customers/edit?id=${this.data.customerId}`
    });
    this.setData({ showMoreMenu: false });
  },

  // Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ
  onViewOrder(e) {
    const orderId = e.currentTarget.dataset.id;
    wx.navigateTo({
      url: `/pages/orders/detail/detail?id=${orderId}`
    });
  },

  // ÂàõÂª∫Êñ∞ËÆ¢Âçï
  onCreateOrder() {
    wx.navigateTo({
      url: `/pages/orders/create/create?customerId=${this.data.customerId}`
    });
    this.setData({ showMoreMenu: false });
  },

  // ÂàÜ‰∫´ÂÆ¢Êà∑
  onShareCustomer() {
    wx.showShareMenu({
      withShareTicket: true,
      menus: ['shareAppMessage', 'shareTimeline']
    });
    this.setData({ showMoreMenu: false });
  },

  // ÂºÄÂßãÂïÜÂä°Ê¥ΩË∞à
  async onNegotiate(e) {
    const orderId = e.currentTarget.dataset.id;
    
    try {
      wx.showLoading({
        title: 'Â§ÑÁêÜ‰∏≠...',
        mask: true
      });
      
      const res = await apiService.put(`/manager/orders/${orderId}/negotiate`, {
        remark: 'ÂºÄÂßãÂïÜÂä°Ê¥ΩË∞à',
        operationType: 'negotiate'
      });
      
      if (res.code === 200) {
        wx.showToast({
          title: 'Â∑≤ÂºÄÂßãÂïÜÂä°Ê¥ΩË∞à',
          icon: 'success'
        });
        
        // ÈáçÊñ∞Âä†ËΩΩËÆ¢ÂçïÂàóË°®
        await this.loadOrders();
      }
    } catch (error) {
      console.error('ÂïÜÂä°Ê¥ΩË∞àÂ§±Ë¥•:', error);
      wx.showToast({
        title: 'Êìç‰ΩúÂ§±Ë¥•',
        icon: 'none'
      });
    } finally {
      wx.hideLoading();
    }
  },

  // Ëé∑ÂèñÁä∂ÊÄÅÊòæÁ§∫‰ø°ÊÅØ
  getStatusInfo(status) {
    const statusInfo = this.data.statusOptions.find(item => item.value === status);
    return statusInfo || { label: 'Êú™Áü•', color: '#d9d9d9' };
  },

  // Ê†ºÂºèÂåñÈáëÈ¢ù
  formatAmount(amount) {
    return (amount / 10000).toFixed(2) + '‰∏á';
  },

  // Ê†ºÂºèÂåñÊó∂Èó¥
  formatTime(time) {
    if (!time) return '';
    const date = new Date(time);
    if (isNaN(date.getTime())) return '';
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${month}-${day} ${hours}:${minutes}`;
  },

  // Ê†ºÂºèÂåñÊó∂Èó¥
  formatDateTime(dateTimeStr) {
    if (!dateTimeStr) return ''
    const date = new Date(dateTimeStr)
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    const hour = String(date.getHours()).padStart(2, '0')
    const minute = String(date.getMinutes()).padStart(2, '0')
    return `${year}-${month}-${day} ${hour}:${minute}`
  }
}); 